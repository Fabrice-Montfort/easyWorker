<?xml version="1.0"?>
<!--
  - Copyright (c) 2014 Frédéric Thomas
  -
  - Licensed to the Apache Software Foundation (ASF) under one or more
  - contributor license agreements.  See the NOTICE file distributed with
  - this work for additional information regarding copyright ownership.
  - The ASF licenses this file to You under the Apache License, Version 2.0
  - (the "License"); you may not use this file except in compliance with
  - the License.  You may obtain a copy of the License at
  -
  -     http://www.apache.org/licenses/LICENSE-2.0
  -
  - Unless required by applicable law or agreed to in writing, software
  - distributed under the License is distributed on an "AS IS" BASIS,
  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  - See the License for the specific language governing permissions and
  - limitations under the License.
  -->

<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               applicationComplete="applicationCompleteHandler(event)"
               implements="com.doublefx.as3.thread.api.IDataProducer">
    <fx:Script><![CDATA[
        import com.doublefx.as3.thread.Thread;
        import com.doublefx.as3.thread.api.IDataProducer;
        import com.doublefx.as3.thread.api.IThread;
        import com.doublefx.as3.thread.api.SharableData;
        import com.doublefx.as3.thread.event.ThreadResultEvent;
        import com.doublefx.as3.thread.util.AsynchronousDataManager;

        import mx.events.FlexEvent;

        /** 128 megabytes */
        private static const SIZE:uint = 1024 * 1024 * 128;

        private var _thread:IThread;
        private var _bytes:ByteArray;
        private var _asynchronousDataManager:AsynchronousDataManager;

        private function applicationCompleteHandler(event:FlexEvent):void {
            // Create and start a new Thread as now the loaderInfo filled.
            _thread = new Thread(CompressRunnable, "myCompressRunnable") as IThread;
            _thread.addEventListener(ThreadResultEvent.RESULT, onResult);
            _thread.start();
        }

        private function btn_clickHandler(event:MouseEvent):void {

            // If not created from a previous click on the button, we created AsynchronousDataManager
            // for this Thread and pass it a condition name, under the wood, a Condition/Mutex is
            // created and used to lock the callee Thread until this Condition is met.
            // The optional 3th parameter of the send method called "lock" allows you to lock the
            // current Thread until the callee Thread has done its job, it set to false by default
            // as most of the time, you won't want to lock it.
            if (!_asynchronousDataManager)
                _asynchronousDataManager = new AsynchronousDataManager(_thread, "whenDataReady");

            // If the send method returns true, it means the callee Thread is not
            // busy and AsynchronousDataManager will be able to call and send to it
            // the data produce by IDataProducer.produceData()
            if (!_asynchronousDataManager.send(this as IDataProducer)) {
                // If the thread is not waiting, so show an error message
                // indicating that it's too busy for a new request
                errorMessage.text = "Error: thread busy at " + getTimer();
            }
        }

        public function produceData():SharableData {

            // Create a big ByteArray for the thread to compress
            _bytes = new ByteArray();
            _bytes.length = SIZE;

            // This byteArray is created with sharable = true, doing so,
            // we won't need to get it back using getSharedProperty.
            _bytes.shareable = true;

            // Clear the status text displays
            errorMessage.text = "";
            logger.text = "";

            // This demonstrates
            // that the main thread is not blocked while the client
            // thread compresses the bytes.
            addEventListener(Event.ENTER_FRAME, onEnterFrame);

            return new SharableData("bytes", _bytes);
        }

        private function onEnterFrame(ev:Event):void {
            // We did not get the mutex. This indicates that the compression
            // is not yet complete. Show a message indicating that.
            logger.text = "Compressing. Time: " + getTimer();
        }

        private function onResult(event:ThreadResultEvent):void {
            // The message indicates that the compression is complete, so stop
            // checking every frame.
            removeEventListener(Event.ENTER_FRAME, onEnterFrame);

            // Output some statistics about the work that was done
            logger.text = "Done compressing " + SIZE + " bytes to "
            + _bytes.length + " bytes ("
            + ((_bytes.length * 100.0) / SIZE).toFixed(2) + "%)";
        }
        ]]></fx:Script>

    <fx:Style>
        #link {
            skinClass: "mx.skins.spark.LinkButtonSkin";
            color: black;
            rollOverColor: blue;
            textDecoration: underline;
        }
    </fx:Style>

    <s:VGroup height="70%" paddingTop="10">
        <s:Label width="500" color="0x323232"
                 text="Demo of uses for the AsynchronousDataManager class. Uses a Thread to compress a big ByteArray without blocking the main (UI) worker thread.
This demonstrate as well how to feed a Thread with data, the Thread is waiting for the data shared with another Thread.
This is the Thread implementation based on the Jackson Dunstan (JacksonDunstan.com) Demo"
                 x="440" y="10"/>
        <s:Label id="link" click="navigateToURL(new URLRequest('http://jacksondunstan.com/articles/2459'))"
                 text="http://jacksondunstan.com/articles/2459"/>
        <s:Label id="logger" height="25%" width="100%" fontFamily="_sans" fontSize="11"/>
        <s:Button label="compress" click="btn_clickHandler(event)"/>
        <s:Label id="errorMessage" height="25%" width="100%" fontFamily="_sans" fontSize="11" color="red"/>
    </s:VGroup>
</s:Application>
